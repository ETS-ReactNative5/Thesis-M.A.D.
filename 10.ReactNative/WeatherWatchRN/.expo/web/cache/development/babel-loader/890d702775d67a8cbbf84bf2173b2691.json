{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { storeWeather, getWeather } from \"./storeWeather\";\nimport useGeoLocation from \"./useGeoLocation\";\nvar url = \"https://api.openweathermap.org/data/2.5\";\nvar callAPI = axios.create({\n  baseURL: url,\n  timeout: 1000\n});\nexport default function useWeather(lat, lon) {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      weather = _useState2[0],\n      setWeather = _useState2[1];\n\n  var latLon = useGeoLocation();\n  useEffect(function () {\n    if (latLon) {\n      fetchAPI.apply(void 0, _toConsumableArray(latLon));\n    }\n  }, [latLon]);\n\n  var fetchAPI = function fetchAPI(lat, lon) {\n    var endpoint, res, data, _data;\n\n    return _regeneratorRuntime.async(function fetchAPI$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            endpoint = \"/forecast?lat=\" + lat + \"&lon=\" + lon + \"&units=metric&appid=\" + \"e25a68c009aa630161457691d6f0a5a6\";\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(callAPI.get(endpoint));\n\n          case 4:\n            res = _context.sent;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(storeWeather(filterData(res.data)));\n\n          case 7:\n            data = _context.sent;\n            setWeather(data);\n            _context.next = 18;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(\"API conection failed\");\n            _context.next = 16;\n            return _regeneratorRuntime.awrap(getWeather());\n\n          case 16:\n            _data = _context.sent;\n            setWeather(_data);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n\n  return weather;\n}\n\nvar filterData = function filterData(rawData) {\n  return {\n    id: rawData.city.id,\n    name: rawData.city.name,\n    country: rawData.city.country,\n    timezone: rawData.city.timezone,\n    coord: {\n      lat: rawData.city.coord.lat,\n      lon: rawData.city.coord.lon\n    },\n    list: rawData.list\n  };\n};","map":{"version":3,"sources":["C:/Users/Saloni.LAP/Documents/MSc/Thesis/Projects/10.ReactNative/WeatherWatchRN/utils/useWeather.js"],"names":["useState","useEffect","axios","storeWeather","getWeather","useGeoLocation","url","callAPI","create","baseURL","timeout","useWeather","lat","lon","weather","setWeather","latLon","fetchAPI","endpoint","get","res","filterData","data","console","log","rawData","id","city","name","country","timezone","coord","list"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,EAAuBC,UAAvB;AACA,OAAOC,cAAP;AAGA,IAAMC,GAAG,GAAG,yCAAZ;AAEA,IAAMC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEH,GADkB;AAE3BI,EAAAA,OAAO,EAAE;AAFkB,CAAb,CAAhB;AAKA,eAAe,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,GAAzB,EAA8B;AAAA,kBACbb,QAAQ,CAAC,IAAD,CADK;AAAA;AAAA,MACpCc,OADoC;AAAA,MAC3BC,UAD2B;;AAG3C,MAAMC,MAAM,GAAGX,cAAc,EAA7B;AAEAJ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIe,MAAJ,EAAY;AACVC,MAAAA,QAAQ,MAAR,4BAAYD,MAAZ;AACD;AACF,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;;AAMA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAOL,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPK,YAAAA,QAFO,sBAEqBN,GAFrB,aAEgCC,GAFhC;AAAA;AAAA,6CAGKN,OAAO,CAACY,GAAR,CAAYD,QAAZ,CAHL;;AAAA;AAGPE,YAAAA,GAHO;AAAA;AAAA,6CAIMjB,YAAY,CAACkB,UAAU,CAACD,GAAG,CAACE,IAAL,CAAX,CAJlB;;AAAA;AAIPA,YAAAA,IAJO;AAKbP,YAAAA,UAAU,CAACO,IAAD,CAAV;AALa;AAAA;;AAAA;AAAA;AAAA;AAObC,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAPa;AAAA,6CAQMpB,UAAU,EARhB;;AAAA;AAQPkB,YAAAA,KARO;AASbP,YAAAA,UAAU,CAACO,KAAD,CAAV;;AATa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAaA,SAAOR,OAAP;AACD;;AAED,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACI,OAAD,EAAa;AAC9B,SAAO;AACLC,IAAAA,EAAE,EAAED,OAAO,CAACE,IAAR,CAAaD,EADZ;AAELE,IAAAA,IAAI,EAAEH,OAAO,CAACE,IAAR,CAAaC,IAFd;AAGLC,IAAAA,OAAO,EAAEJ,OAAO,CAACE,IAAR,CAAaE,OAHjB;AAILC,IAAAA,QAAQ,EAAEL,OAAO,CAACE,IAAR,CAAaG,QAJlB;AAKLC,IAAAA,KAAK,EAAE;AACLnB,MAAAA,GAAG,EAAEa,OAAO,CAACE,IAAR,CAAaI,KAAb,CAAmBnB,GADnB;AAELC,MAAAA,GAAG,EAAEY,OAAO,CAACE,IAAR,CAAaI,KAAb,CAAmBlB;AAFnB,KALF;AASLmB,IAAAA,IAAI,EAAEP,OAAO,CAACO;AATT,GAAP;AAWD,CAZD","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { API_KEY } from \"react-native-dotenv\";\r\nimport axios from \"axios\";\r\nimport { storeWeather, getWeather } from \"./storeWeather\";\r\nimport useGeoLocation from \"./useGeoLocation\";\r\n\r\n// fetch api with axios\r\nconst url = \"https://api.openweathermap.org/data/2.5\";\r\n\r\nconst callAPI = axios.create({\r\n  baseURL: url,\r\n  timeout: 1000,\r\n});\r\n\r\nexport default function useWeather(lat, lon) {\r\n  const [weather, setWeather] = useState(null);\r\n\r\n  const latLon = useGeoLocation();\r\n\r\n  useEffect(() => {\r\n    if (latLon) {\r\n      fetchAPI(...latLon);\r\n    }\r\n  }, [latLon]);\r\n\r\n  const fetchAPI = async (lat, lon) => {\r\n    try {\r\n      const endpoint = `/forecast?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`;\r\n      const res = await callAPI.get(endpoint);\r\n      const data = await storeWeather(filterData(res.data));\r\n      setWeather(data);\r\n    } catch (err) {\r\n      console.log(\"API conection failed\");\r\n      const data = await getWeather();\r\n      setWeather(data);\r\n    }\r\n  };\r\n\r\n  return weather;\r\n}\r\n\r\nconst filterData = (rawData) => {\r\n  return {\r\n    id: rawData.city.id,\r\n    name: rawData.city.name,\r\n    country: rawData.city.country,\r\n    timezone: rawData.city.timezone,\r\n    coord: {\r\n      lat: rawData.city.coord.lat,\r\n      lon: rawData.city.coord.lon,\r\n    },\r\n    list: rawData.list,\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}